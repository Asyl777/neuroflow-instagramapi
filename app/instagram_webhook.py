"""
–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Instagram Webhook handler
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Meta Business API webhooks
"""
import hashlib
import hmac
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
from fastapi import HTTPException, Request
from pydantic import BaseModel

logger = logging.getLogger(__name__)

# –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π Instagram API
class InstagramWebhookEvent(BaseModel):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ Instagram webhook —Å–æ–±—ã—Ç–∏—è"""
    object: str  # "instagram" 
    entry: List[Dict[str, Any]]

class InstagramEntry(BaseModel):
    """–ó–∞–ø–∏—Å—å –≤ webhook"""
    id: str  # Instagram Business Account ID
    time: int  # Unix timestamp
    messaging: Optional[List[Dict[str, Any]]] = None
    changes: Optional[List[Dict[str, Any]]] = None

class InstagramMessage(BaseModel):
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Instagram"""
    mid: str  # Message ID
    text: Optional[str] = None
    attachments: Optional[List[Dict[str, Any]]] = None
    timestamp: int
    
class InstagramSender(BaseModel):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
    id: str  # Instagram-scoped ID (IGSID)

class InstagramRecipient(BaseModel):
    """–ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
    id: str  # Instagram Business Account ID


class InstagramWebhookProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö Instagram webhooks"""
    
    def __init__(self, app_secret: str = None):
        self.app_secret = app_secret
        self.supported_events = {
            "messages",
            "messaging_postbacks", 
            "messaging_optins",
            "messaging_referrals",
            "message_reads",
            "message_deliveries",
            "messaging_handovers",
            "messaging_policy_enforcement"
        }
    
    def verify_signature(self, payload: bytes, signature: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç Facebook/Instagram
        """
        if not self.app_secret:
            logger.warning("‚ö†Ô∏è App secret –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏")
            return True
            
        expected_signature = hmac.new(
            self.app_secret.encode('utf-8'),
            payload,
            hashlib.sha1
        ).hexdigest()
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "sha1=" –µ—Å–ª–∏ –µ—Å—Ç—å
        if signature.startswith('sha1='):
            signature = signature[5:]
            
        return hmac.compare_digest(expected_signature, signature)
    
    async def process_webhook(self, webhook_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ Instagram webhook
        
        –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:
        {
          "object": "instagram",
          "entry": [
            {
              "id": "instagram-business-account-id",
              "time": 1234567890,
              "messaging": [
                {
                  "sender": {"id": "instagram-scoped-id"},
                  "recipient": {"id": "instagram-business-account-id"},
                  "timestamp": 1234567890,
                  "message": {
                    "mid": "message-id",
                    "text": "Hello World",
                    "attachments": [...]
                  }
                }
              ]
            }
          ]
        }
        """
        
        messages_to_process = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Instagram webhook
            if webhook_data.get("object") != "instagram":
                logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {webhook_data.get('object')}")
                return []
            
            entries = webhook_data.get("entry", [])
            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(entries)} –∑–∞–ø–∏—Å–µ–π –≤ webhook")
            
            for entry in entries:
                instagram_account_id = entry.get("id")
                entry_time = entry.get("time")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                messaging_events = entry.get("messaging", [])
                
                for messaging_event in messaging_events:
                    processed_message = await self._process_messaging_event(
                        messaging_event, 
                        instagram_account_id,
                        entry_time
                    )
                    
                    if processed_message:
                        messages_to_process.append(processed_message)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏)
                changes = entry.get("changes", [])
                for change in changes:
                    await self._process_change_event(change, instagram_account_id)
            
            return messages_to_process
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            raise HTTPException(status_code=500, detail=f"Webhook processing error: {str(e)}")
    
    async def _process_messaging_event(
        self, 
        messaging_event: Dict[str, Any], 
        instagram_account_id: str,
        entry_time: int
    ) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        try:
            sender = messaging_event.get("sender", {})
            recipient = messaging_event.get("recipient", {}) 
            timestamp = messaging_event.get("timestamp", entry_time)
            
            sender_id = sender.get("id")
            if not sender_id:
                logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
                return None
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if "message" in messaging_event:
                message_data = messaging_event["message"]
                
                return {
                    "type": "message",
                    "sender_id": sender_id,
                    "recipient_id": recipient.get("id", instagram_account_id),
                    "message_id": message_data.get("mid"),
                    "text": message_data.get("text", ""),
                    "attachments": message_data.get("attachments", []),
                    "timestamp": timestamp,
                    "instagram_account_id": instagram_account_id,
                    "raw_event": messaging_event
                }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º postback (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
            elif "postback" in messaging_event:
                postback_data = messaging_event["postback"]
                
                return {
                    "type": "postback",
                    "sender_id": sender_id,
                    "recipient_id": recipient.get("id", instagram_account_id), 
                    "payload": postback_data.get("payload"),
                    "title": postback_data.get("title"),
                    "timestamp": timestamp,
                    "instagram_account_id": instagram_account_id,
                    "raw_event": messaging_event
                }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
            elif "delivery" in messaging_event:
                delivery_data = messaging_event["delivery"]
                
                logger.info(f"üì¨ –î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {delivery_data.get('mids', [])}")
                return {
                    "type": "delivery",
                    "sender_id": sender_id,
                    "message_ids": delivery_data.get("mids", []),
                    "timestamp": timestamp
                }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è
            elif "read" in messaging_event:
                read_data = messaging_event["read"]
                
                logger.info(f"üëÄ –°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –¥–æ: {read_data.get('watermark')}")
                return {
                    "type": "read",
                    "sender_id": sender_id,
                    "watermark": read_data.get("watermark"),
                    "timestamp": timestamp
                }
            
            else:
                logger.info(f"ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {messaging_event.keys()}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ messaging —Å–æ–±—ã—Ç–∏—è: {e}")
            return None
    
    async def _process_change_event(self, change: Dict[str, Any], instagram_account_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ç.–¥.)"""
        
        field = change.get("field")
        value = change.get("value", {})
        
        logger.info(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø–æ–ª–µ '{field}': {value}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤  
        if field == "comments":
            comment_id = value.get("id")
            text = value.get("text")
            from_user = value.get("from", {})
            
            logger.info(f"üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {from_user.get('username', 'unknown')}: {text}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        elif field == "mentions":
            media_id = value.get("media_id") 
            comment_id = value.get("comment_id")
            
            logger.info(f"üì¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –º–µ–¥–∏–∞ {media_id}")
        
        # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
        else:
            logger.info(f"‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è '{field}' –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    
    def get_verification_response(self, verify_token: str, challenge: str, mode: str) -> str:
        """
        –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook –¥–ª—è Facebook/Instagram
        
        Facebook –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:
        GET /webhooks/instagram?hub.mode=subscribe&hub.challenge=123&hub.verify_token=your_token
        """
        
        if mode == "subscribe" and verify_token == self.get_verify_token():
            logger.info("‚úÖ Webhook –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return challenge
        else:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π verify_token –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ webhook")
            raise HTTPException(status_code=403, detail="Verification failed")
    
    def get_verify_token(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ verify —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # TODO: –í—ã–Ω–µ—Å—Ç–∏ –≤ settings
        return "instagram_webhook_verify_token_2024"
    
    async def extract_user_info(self, sender_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Instagram Basic Display API
        
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
        """
        
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        return {
            "instagram_user_id": sender_id,
            "username": f"user_{sender_id}",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            "full_name": None,
            "profile_pic_url": None
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
instagram_webhook_processor = InstagramWebhookProcessor(
    app_secret=None  # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ settings
)