"""
Instagram API —Å —á–∞—Ç-–±–æ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º
–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤, —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""
from fastapi import FastAPI, Depends, HTTPException, Security, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security.api_key import APIKeyHeader
from sqlalchemy.ext.asyncio import AsyncSession
from contextlib import asynccontextmanager
import logging
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from app.config import settings
from app.database import get_db_session, init_db, close_db, test_db_connection

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π
from app.models import *  # –°—Ç–∞—Ä—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from app.chatbot_models import *  # –ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —á–∞—Ç-–±–æ—Ç–∞

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from app.chatbot_service import chatbot_service
from app.api_routes import api_router, ai_router, chatbot_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞
API_KEY_NAME = "x-api-key"
api_key_header = APIKeyHeader(name=API_KEY_NAME, auto_error=False)

def get_api_key(api_key_header: str = Security(api_key_header)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞"""
    if api_key_header == settings.api_key:
        return api_key_header
    else:
        raise HTTPException(status_code=403, detail="Could not validate credentials")

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Instagram API —Å —á–∞—Ç-–±–æ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        db_connected = await test_db_connection()
        if not db_connected:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            raise Exception("Database connection failed")
        
        logger.info("üéØ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise
    
    yield
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞...")
    await close_db()
    logger.info("üëã –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Instagram Chatbot API",
    description="API –¥–ª—è Instagram —á–∞—Ç-–±–æ—Ç–∞ —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π",
    version="2.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins_list,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(api_router)
app.include_router(ai_router)
app.include_router(chatbot_router)

# ============================================================================
# –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
# ============================================================================

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "service": "Instagram Chatbot API",
        "version": "2.0.0",
        "features": [
            "Chatbot Constructor",
            "Trigger System", 
            "Scenario Management",
            "AI Agent Integration",
            "Template System",
            "User State Management",
            "Analytics & Events"
        ],
        "status": "running",
        "timestamp": datetime.utcnow().isoformat()
    }

@app.get("/health")
async def health_check():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π health check"""
    
    health_status = {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "version": "2.0.0",
        "services": {}
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        db_status = await test_db_connection()
        health_status["services"]["database"] = "connected" if db_status else "disconnected"
    except Exception as e:
        health_status["services"]["database"] = f"error: {str(e)}"
        health_status["status"] = "unhealthy"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç-–±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞
    try:
        health_status["services"]["chatbot"] = "ready"
    except Exception as e:
        health_status["services"]["chatbot"] = f"error: {str(e)}"
    
    return health_status

# ============================================================================
# WEBHOOK –≠–ù–î–ü–û–ò–ù–¢–´
# ============================================================================

@app.post("/webhooks/instagram")
async def instagram_webhook(
    webhook_data: dict,
    background_tasks: BackgroundTasks,
    api_key: str = Depends(get_api_key),
    db: AsyncSession = Depends(get_db_session)
):
    """
    Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Instagram
    """
    
    try:
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Instagram: {webhook_data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ Instagram API
        message_data = webhook_data.get("entry", [{}])[0].get("messaging", [{}])[0]
        
        if not message_data:
            return {"status": "no_message_data"}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        sender_id = message_data.get("sender", {}).get("id")
        message_text = message_data.get("message", {}).get("text", "")
        message_id = message_data.get("message", {}).get("mid")
        
        if not sender_id or not message_text:
            return {"status": "incomplete_data"}
        
        # –ü–æ–ª—É—á–∞–µ–º username (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Instagram API)
        username = f"user_{sender_id}"  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        background_tasks.add_task(
            process_instagram_message,
            db, sender_id, username, message_text, message_id
        )
        
        return {
            "status": "received",
            "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

async def process_instagram_message(
    db: AsyncSession,
    sender_id: int,
    username: str,
    message_text: str,
    message_id: str
):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Instagram"""
    
    try:
        result = await chatbot_service.process_message(
            db=db,
            instagram_user_id=int(sender_id),
            username=username,
            message_text=message_text,
            instagram_message_id=message_id
        )
        
        await db.commit()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        if result.get("responses"):
            await send_responses_to_instagram(result["responses"], sender_id)
        
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {username}: {e}")
        await db.rollback()

async def send_responses_to_instagram(responses: list, recipient_id: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ Instagram"""
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Instagram API
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    
    for response in responses:
        if response.get("type") == "send_message":
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {response.get('text')}")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ instagrapi
        
        elif response.get("type") == "ai_agent_call":
            logger.info(f"ü§ñ –í—ã–∑–æ–≤ AI –∞–≥–µ–Ω—Ç–∞: {response.get('agent_url')}")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É AI –∞–≥–µ–Ω—Ç—É
        
        elif response.get("type") == "delay":
            logger.info(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ {response.get('delay_seconds')} —Å–µ–∫—É–Ω–¥")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ Celery

# ============================================================================
# –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –°–û –°–¢–ê–†–´–ú–ò –≠–ù–î–ü–û–ò–ù–¢–ê–ú–ò
# ============================================================================

@app.post("/login")
async def login_compatibility(
    credentials: dict,
    api_key: str = Depends(get_api_key)
):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º –ª–æ–≥–∏–Ω–∞"""
    
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /login")
    
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ instagrapi
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    
    return {
        "status": "ok",
        "message": "Login endpoint moved to chatbot system",
        "redirect": "/api/v1/chatbot"
    }

@app.post("/send_message")
async def send_message_compatibility(
    message: dict,
    api_key: str = Depends(get_api_key)
):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /send_message")
    
    # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    
    return {
        "status": "ok", 
        "message": "Message sending moved to chatbot system",
        "redirect": "/api/v1/ai/process-message"
    }

@app.get("/inbox")
async def inbox_compatibility(
    api_key: str = Depends(get_api_key)
):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º inbox"""
    
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /inbox")
    
    return {
        "message": "Inbox functionality moved to chatbot system",
        "redirect": "/api/v1/ai/users/active"
    }

@app.get("/dialogs")
async def dialogs_compatibility(
    api_key: str = Depends(get_api_key)
):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º dialogs"""
    
    logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /dialogs")
    
    return {
        "message": "Dialogs functionality moved to chatbot system", 
        "redirect": "/api/v1/chatbot/scenarios"
    }

if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "app.main_new:app",
        host=settings.server_host,
        port=settings.server_port,
        reload=settings.environment == "development",
        log_level=settings.log_level.lower()
    )